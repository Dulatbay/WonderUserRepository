package kz.wonder.wonderuserrepository.mappers;

import kz.wonder.kaspi.client.model.OrdersDataResponse;
import kz.wonder.wonderuserrepository.dto.request.KaspiStoreCreateRequest;
import kz.wonder.wonderuserrepository.entities.KaspiCity;
import kz.wonder.wonderuserrepository.entities.KaspiStore;
import kz.wonder.wonderuserrepository.entities.WonderUser;
import kz.wonder.wonderuserrepository.repositories.KaspiStoreRepository;
import kz.wonder.wonderuserrepository.services.UserService;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class KaspiStoreMapper {
    private final KaspiStoreRepository kaspiStoreRepository;
    // todo: переделать этот говно код
    @Value("${application.admin-keycloak-id}")
    private String adminKeycloakId;
    private WonderUser admin;
    private final UserService userService;

    public KaspiStore getKaspiStore(OrdersDataResponse.OrderAttributes orderAttributes ,OrdersDataResponse.Address address, KaspiCity kaspiCity) {
        var optionalKaspiStore = kaspiStoreRepository.findByOriginAddressId(address.getId());


        if (optionalKaspiStore.isEmpty()) {

            String streetName = address.getAddress().getStreetName() == null ? null : address.getAddress().getStreetName().trim();
            String streetNumber = address.getAddress().getStreetNumber() == null ? null : address.getAddress().getStreetNumber().trim();

            address.getAddress().setStreetName(streetName);
            address.getAddress().setStreetNumber(streetNumber);

            optionalKaspiStore = kaspiStoreRepository.findByStoreAddress(streetName, streetNumber);
        }

        if (optionalKaspiStore.isPresent()) {
            return optionalKaspiStore.get();
        } else {
            KaspiStore kaspiStore = getStore(address, kaspiCity, orderAttributes.getPickupPointId());
            return kaspiStoreRepository.save(kaspiStore);
        }
    }

    private @NonNull KaspiStore getStore(OrdersDataResponse.Address address, KaspiCity kaspiCity, String pickupPointId) {
        // todo: этот store создается для какого юзера(сделаю пока для main админа)
        KaspiStore kaspiStore = new KaspiStore();


        kaspiStore.setKaspiId(address.getDisplayName());
        kaspiStore.setStreetName(address.getAddress().getStreetName());
        kaspiStore.setStreetNumber(address.getAddress().getStreetNumber());
        kaspiStore.setFormattedAddress(address.getAddress().getFormattedAddress());
        kaspiStore.setLatitude(address.getAddress().getLatitude());
        kaspiStore.setLongitude(address.getAddress().getLongitude());
        kaspiStore.setKaspiCity(kaspiCity);
        kaspiStore.setOriginAddressId(address.getId());
        kaspiStore.setPickupPointId(pickupPointId);
        kaspiStore.setComment("Generated by WONDER FBO");

        if (admin == null)
            admin = userService.getUserByKeycloakId(adminKeycloakId);

        kaspiStore.setWonderUser(admin);
        return kaspiStore;
    }

    public KaspiStore mapToCreateStore(KaspiStoreCreateRequest kaspiStoreCreateRequest,
                                       KaspiCity selectedCity,
                                       String formattedAddress
    ) {
        KaspiStore kaspiStore = new KaspiStore();

        kaspiStore.setWonderUser(kaspiStoreCreateRequest.getWonderUser());
        kaspiStore.setKaspiCity(selectedCity);
        kaspiStore.setKaspiId(kaspiStoreCreateRequest.getKaspiId());
        kaspiStore.setStreetName(kaspiStoreCreateRequest.getStreetName());
        kaspiStore.setStreetNumber(kaspiStoreCreateRequest.getStreetNumber());
        kaspiStore.setFormattedAddress(formattedAddress);
        kaspiStore.setEnabled(true);

        return kaspiStore;
    }
}
